"use strict";(self.webpackChunkmynotes=self.webpackChunkmynotes||[]).push([[266],{4957:(e,t,a)=>{a.r(t),a.d(t,{data:()=>n});const n={key:"v-50cbcee6",path:"/Vue/03.%E5%88%9D%E8%AF%86Vue.html",title:"03.初识Vue",lang:"en-US",frontmatter:{title:"03.初识Vue"},excerpt:"",headers:[{level:2,title:"3. 初识Vue",slug:"_3-初识vue",children:[]}],filePathRelative:"Vue/03.初识Vue.md",git:{updatedTime:null}}},4156:(e,t,a)=>{a.r(t),a.d(t,{default:()=>u});const n=(0,a(6252).uE)('<h2 id="_3-初识vue" tabindex="-1"><a class="header-anchor" href="#_3-初识vue" aria-hidden="true">#</a> 3. 初识Vue</h2><div class="language-markdown ext-md"><pre class="language-markdown"><code>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\n\n2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\n\n3.root容器里的代码被称为【Vue模板】；\n\n4.Vue实例和容器是一一对应的；\n\n5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；\n\n6.{{xxx}}中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；\n\n7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\n</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>注意区分：js表达式和js代码(语句)</p><p>1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方。</p><p>（1）. a</p><p>（2）. a+b</p><p>（3）. demo(1)</p><p>（4）. x===y?&#39;a&#39;:&#39;b&#39;</p><p>2.js代码（语句）</p><p>（1）. if(){}</p><p>（2）. for(){}</p></div>',3),u={render:function(e,t){return n}}}}]);